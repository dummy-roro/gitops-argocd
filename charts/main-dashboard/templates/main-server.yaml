apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "main-dashboard.backendFullname" . }}
  namespace: {{ .Values.namespace }}
  labels:
    app: {{ include "main-dashboard.backendName" . }}
    tier: backend
    env: {{ .Values.env }}
spec:
  replicas: {{ .Values.backend.replicaCount }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 25%
  selector:
    matchLabels:
      app: {{ include "main-dashboard.backendName" . }}
  template:
    metadata:
      labels:
        app: {{ include "main-dashboard.backendName" . }}
        tier: backend
        env: {{ .Values.env }}
    spec:
      imagePullSecrets:
        - name: {{ .Values.backend.imagePullSecret }}
      securityContext:
        runAsUser: {{ .Values.backend.securityContext.runAsUser }}
        runAsGroup: {{ .Values.backend.securityContext.runAsGroup }}
        fsGroup: {{ .Values.backend.securityContext.fsGroup }}
      containers:
        - name: api
          image: "{{ .Values.backend.image.repository }}:{{ .Values.backend.image.tag }}"
          imagePullPolicy: {{ .Values.backend.image.pullPolicy }}
          env:
            - name: MONGO_CONN_STR
              value: {{ quote .Values.backend.envVars.MONGO_CONN_STR }}
            - name: MONGO_USERNAME
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.backend.secrets.mongo.name }}
                  key: {{ .Values.backend.secrets.mongo.usernameKey }}
            - name: MONGO_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.backend.secrets.mongo.name }}
                  key: {{ .Values.backend.secrets.mongo.passwordKey }}
          ports:
            - containerPort: {{ .Values.backend.service.port }}
          livenessProbe:
            httpGet:
              path: /healthz
              port: {{ .Values.backend.service.port }}
            initialDelaySeconds: 2
            periodSeconds: 5
          readinessProbe:
            httpGet:
              path: /ready
              port: {{ .Values.backend.service.port }}
            initialDelaySeconds: 5
            periodSeconds: 5
            successThreshold: 1
          {{- if .Values.backend.probes.startup.enabled }}
          startupProbe:
            httpGet:
              path: /started
              port: {{ .Values.backend.service.port }}
            initialDelaySeconds: {{ .Values.backend.probes.startup.initialDelaySeconds }}
            periodSeconds: {{ .Values.backend.probes.startup.periodSeconds }}
            failureThreshold: {{ .Values.backend.probes.startup.failureThreshold }}
          {{- end }}
          resources:
            requests:
              cpu: {{ .Values.backend.resources.requests.cpu }}
              memory: {{ .Values.backend.resources.requests.memory }}
            limits:
              cpu: {{ .Values.backend.resources.limits.cpu }}
              memory: {{ .Values.backend.resources.limits.memory }}
          securityContext:
            allowPrivilegeEscalation: {{ .Values.backend.containerSecurityContext.allowPrivilegeEscalation }}
            runAsNonRoot: {{ .Values.backend.containerSecurityContext.runAsNonRoot }}
            readOnlyRootFilesystem: {{ .Values.backend.containerSecurityContext.readOnlyRootFilesystem }}
            capabilities:
              drop:
              {{- range .Values.backend.containerSecurityContext.capabilities.drop }}
                - {{ . }}
              {{- end }}
---
apiVersion: v1
kind: Service
metadata:
  name: {{ include "main-dashboard.backendFullname" . }}
  namespace: {{ .Values.namespace }}
  labels:
    app: {{ include "main-dashboard.backendName" . }}
    tier: backend
    env: {{ .Values.env }}
spec:
  type: {{ .Values.backend.service.type }}
  ports:
    - port: {{ .Values.backend.service.port }}
      targetPort: {{ .Values.backend.service.targetPort | default .Values.backend.service.port }}
      protocol: TCP
      name: http
  selector:
    app: {{ include "main-dashboard.backendName" . }}
